{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"tags/","title":"Tag","text":""},{"location":"tags/#tag:api","title":"API","text":"<ul> <li>            API 101 \u2014 The Beginner\u2019s Guide to Building and Securing APIs          </li> <li>            Designing Secure and Scalable APIs \u2014 A Comprehensive Guide          </li> </ul>"},{"location":"tags/#tag:architecture","title":"Architecture","text":"<ul> <li>            System Architecture \u2014 A Comprehensive, Practical Guide          </li> </ul>"},{"location":"tags/#tag:beginner","title":"Beginner","text":"<ul> <li>            API 101 \u2014 The Beginner\u2019s Guide to Building and Securing APIs          </li> </ul>"},{"location":"tags/#tag:cheat-sheet","title":"Cheat Sheet","text":"<ul> <li>            Git 101 \u2013 Commands and Workflows Cheat Sheet          </li> </ul>"},{"location":"tags/#tag:design","title":"Design","text":"<ul> <li>            Designing Secure and Scalable APIs \u2014 A Comprehensive Guide          </li> </ul>"},{"location":"tags/#tag:devops","title":"DevOps","text":"<ul> <li>            The Definitive Guide to Version Control with Git and GitHub          </li> </ul>"},{"location":"tags/#tag:fastapi","title":"FastAPI","text":"<ul> <li>            API 101 \u2014 The Beginner\u2019s Guide to Building and Securing APIs          </li> <li>            Designing Secure and Scalable APIs \u2014 A Comprehensive Guide          </li> </ul>"},{"location":"tags/#tag:git","title":"Git","text":"<ul> <li>            Git 101 \u2013 Commands and Workflows Cheat Sheet          </li> <li>            The Definitive Guide to Version Control with Git and GitHub          </li> </ul>"},{"location":"tags/#tag:github","title":"GitHub","text":"<ul> <li>            The Definitive Guide to Version Control with Git and GitHub          </li> </ul>"},{"location":"tags/#tag:python","title":"Python","text":"<ul> <li>            Handle Missing Values in Pandas Without Losing Information          </li> </ul>"},{"location":"tags/#tag:reliability","title":"Reliability","text":"<ul> <li>            System Architecture \u2014 A Comprehensive, Practical Guide          </li> </ul>"},{"location":"tags/#tag:scalability","title":"Scalability","text":"<ul> <li>            System Architecture \u2014 A Comprehensive, Practical Guide          </li> </ul>"},{"location":"tags/#tag:security","title":"Security","text":"<ul> <li>            API 101 \u2014 The Beginner\u2019s Guide to Building and Securing APIs          </li> <li>            Designing Secure and Scalable APIs \u2014 A Comprehensive Guide          </li> </ul>"},{"location":"tags/#tag:tech","title":"Tech","text":"<ul> <li>            Handle Missing Values in Pandas Without Losing Information          </li> </ul>"},{"location":"tags/#tag:test","title":"Test","text":"<ul> <li>            Handle Missing Values in Pandas Without Losing Information          </li> </ul>"},{"location":"tags/#tag:version-control","title":"Version Control","text":"<ul> <li>            Git 101 \u2013 Commands and Workflows Cheat Sheet          </li> <li>            The Definitive Guide to Version Control with Git and GitHub          </li> </ul>"},{"location":"about/","title":"About","text":"Hi! I'm  Subhajit <p>I'm a freelance machine learning engineer based in the United Kingdom with 3+ years of experience building data automation workflows, interactive dashboards, and machine learning systems across finance, e-commerce, and data-driven research.</p> <p>I help businesses turn unstructured data - PDFs, scanned documents, and messy reports - into searchable knowledge bases using OCR, NLP, and LLMs. From RAG-powered chatbots to interactive dashboards, I build end-to-end AI systems that simplify search, insight, and automation.</p> <p>I've had quite the journey - from diving deep into quantum research to building indie projects and taking on freelance work in finance and e-commerce. When it comes to machine learning, I don't just build prototypes that look good on paper. I'm all about creating real, production-ready systems that actually work in the wild. My go-to tools? Python, Streamlit, LangChain, and AWS - they help me deliver solutions that are both fast and rock-solid.</p> <p>Outside work, I'm into code experiments, trading, and reading books. If you're looking for someone who blends deep tech with business impact - I'd love to hear from you. </p>"},{"location":"api-101-beginner-guide/","title":"API 101 \u2014 The Beginner\u2019s Guide to Building and Securing APIs","text":"<p>New to APIs? This guide explains core concepts in clear language, then walks you through building a small FastAPI service with essential security and testing tips. When you\u2019re ready for advanced patterns, read the companion: Designing Secure and Scalable APIs \u2014 A Comprehensive Guide.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#what-is-an-api","title":"What Is an API?","text":"<p>An API is a contract for software to talk to software. It defines how to request data or perform actions using a consistent format over HTTP.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#rest-vs-graphql-vs-rpc-high-level","title":"REST vs GraphQL vs RPC (High Level)","text":"<ul> <li>REST: resources (like <code>users</code>, <code>orders</code>) accessed via URLs and HTTP methods.</li> <li>GraphQL: clients ask for exactly the fields they need in a single endpoint.</li> <li>RPC/gRPC: function-style calls for service-to-service, very fast.</li> </ul> <p>For beginners, start with REST.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#http-essentials-in-2-minutes","title":"HTTP Essentials in 2 Minutes","text":"<ul> <li>Methods: <code>GET</code> (read), <code>POST</code> (create), <code>PATCH</code> (update), <code>DELETE</code> (remove).</li> <li>URLs: <code>https://api.example.com/v1/items/123</code>.</li> <li>Headers: metadata like <code>Authorization</code>, <code>Content-Type</code>.</li> <li>Status codes: 2xx success, 4xx client errors, 5xx server errors.</li> <li>JSON: common data format: <code>{ \"name\": \"Notebook\", \"price\": 9.99 }</code>.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#a-minimal-fastapi-service","title":"A Minimal FastAPI Service","text":"<pre><code>from typing import Optional\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel, Field\n\napp = FastAPI(title=\"API 101\", version=\"1.0.0\")\n\nclass ItemIn(BaseModel):\n    name: str = Field(min_length=1, max_length=100)\n    price: float = Field(ge=0)\n    description: Optional[str] = Field(default=None, max_length=280)\n\nclass ItemOut(BaseModel):\n    id: str\n    name: str\n    price: float\n\nDB: dict[str, ItemOut] = {}\n\n@app.get(\"/v1/health\")\nasync def health() -&gt; dict:\n    return {\"status\": \"ok\"}\n\n@app.post(\"/v1/items\", response_model=ItemOut, status_code=201)\nasync def create_item(item: ItemIn) -&gt; ItemOut:\n    new_id = f\"it_{len(DB)+1}\"\n    output = ItemOut(id=new_id, name=item.name, price=item.price)\n    DB[new_id] = output\n    return output\n\n@app.get(\"/v1/items/{item_id}\", response_model=ItemOut)\nasync def get_item(item_id: str) -&gt; ItemOut:\n    if item_id not in DB:\n        raise HTTPException(status_code=404, detail=\"item_not_found\")\n    return DB[item_id]\n</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#requestresponse-flow","title":"Request/Response Flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant U as Client\n    participant A as FastAPI\n    participant D as In-memory DB\n    U-&gt;&gt;A: POST /v1/items { name, price }\n    A-&gt;&gt;A: Validate JSON (Pydantic)\n    A-&gt;&gt;D: Save item\n    D--&gt;&gt;A: OK\n    A--&gt;&gt;U: 201 Created + Item JSON</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#input-validation-basics","title":"Input Validation Basics","text":"<ul> <li>Validate types and ranges (e.g., price &gt;= 0).</li> <li>Keep strings bounded (e.g., name &lt;= 100 chars).</li> <li>Return clear errors with <code>400</code>/<code>422</code> for invalid requests.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#errors-youll-see-early","title":"Errors You\u2019ll See Early","text":"<ul> <li><code>400/422</code> when the body is malformed or fields fail validation.</li> <li><code>404</code> when an ID doesn\u2019t exist.</li> <li><code>405</code> when the method is wrong (e.g., <code>PUT</code> on a <code>GET</code> endpoint).</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#tiny-decision-tree","title":"Tiny Decision Tree","text":"<pre><code>flowchart TD\n    A[Request] --&gt; B{Valid input?}\n    B -- No --&gt; E[400/422]\n    B -- Yes --&gt; C{Resource exists?}\n    C -- No --&gt; F[404]\n    C -- Yes --&gt; D[2xx]</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#auth-101-api-keys-vs-bearer-tokens","title":"Auth 101: API Keys vs Bearer Tokens","text":"<ul> <li>API Key: static secret string in header <code>X-API-Key</code>. Simple, rotate often.</li> <li>Bearer Token (JWT): signed token with claims (who you are, scopes). More flexible.</li> </ul> <pre><code>from fastapi import Header, Depends\n\ndef require_api_key(x_api_key: str = Header(alias=\"X-API-Key\")) -&gt; None:\n    if x_api_key != \"demo_secret\":\n        raise HTTPException(status_code=401, detail=\"invalid_api_key\")\n\n@app.get(\"/v1/private\", dependencies=[Depends(require_api_key)])\nasync def private_resource() -&gt; dict:\n    return {\"message\": \"authorized\"}\n</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#cors-for-browser-apps","title":"CORS for Browser Apps","text":"<p>If your frontend runs on a different domain, enable CORS.</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"https://app.example.com\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PATCH\", \"DELETE\"],\n    allow_headers=[\"Authorization\", \"Content-Type\", \"X-API-Key\"],\n)\n</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#pagination-and-filtering-at-a-glance","title":"Pagination and Filtering (At a Glance)","text":"<ul> <li>Offset: <code>GET /v1/items?offset=0&amp;limit=20</code> \u2014 simple, good for small sets.</li> <li>Cursor: <code>GET /v1/items?cursor=abc&amp;limit=20</code> \u2014 better for changing data.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#idempotency-why-it-matters","title":"Idempotency (Why It Matters)","text":"<p>If clients retry a <code>POST</code>, you don\u2019t want duplicate creations. Accept <code>X-Idempotency-Key</code> and reuse the original result for the same key.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#rate-limiting-conceptual","title":"Rate Limiting (Conceptual)","text":"<p>Protect your API with per-user or per-IP limits. On limit exceeded, return <code>429</code> with <code>Retry-After</code> seconds.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#testing-your-api","title":"Testing Your API","text":"<ul> <li><code>curl</code> quick checks, Postman/Insomnia for collections.</li> <li>Read logs and status codes; verify headers and JSON.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#handy-curl-examples","title":"Handy curl Examples","text":"<pre><code>curl -i https://api.example.com/v1/health\ncurl -i -X POST https://api.example.com/v1/items \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"Pen\",\"price\":1.25}'\ncurl -i https://api.example.com/v1/items/it_1\n</code></pre>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#beginner-hardening-checklist","title":"Beginner Hardening Checklist","text":"<ul> <li>Validate all inputs with Pydantic.</li> <li>Set <code>Content-Type: application/json</code> in responses.</li> <li>Turn on CORS only for known origins.</li> <li>Use API keys or bearer tokens; never accept secrets in query strings.</li> <li>Add basic rate limiting and idempotency for writes.</li> <li>Log a <code>request_id</code> and include it in responses.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#glossary","title":"Glossary","text":"<ul> <li>JWT: signed token proving identity and permissions.</li> <li>ETag: a version tag for caching and concurrency.</li> <li>CORS: browser rule for cross-origin requests.</li> <li>2xx/4xx/5xx: success/client/server status code families.</li> </ul>","tags":["API","Beginner","FastAPI","Security"]},{"location":"api-101-beginner-guide/#whats-next","title":"What\u2019s Next","text":"<p>Ready to go deeper? See the advanced guide for versioning, ETags, RBAC, rate limiting, webhooks security, observability, and more: Designing Secure and Scalable APIs \u2014 A Comprehensive Guide.</p>","tags":["API","Beginner","FastAPI","Security"]},{"location":"secure-scalable-apis-guide/","title":"Designing Secure and Scalable APIs \u2014 A Comprehensive Guide","text":"<p>APIs are the connective tissue of modern products. This guide distills proven practices for API design, security, observability, and reliability\u2014covering the most frequent questions and edge cases teams face in production. Examples use FastAPI and Pydantic v2, but the principles generalize to any stack.</p>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#architecture-overview","title":"Architecture Overview","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant Client\n    participant Gateway as API Gateway/WAF\n    participant API as FastAPI Service\n    participant Auth as Auth Service (JWT/OAuth2)\n    participant RL as Rate Limiter (Redis)\n    participant DB as Database\n\n    Client-&gt;&gt;Gateway: HTTPS request (+ headers)\n    Gateway-&gt;&gt;RL: Check quota + idempotency\n    RL--&gt;&gt;Gateway: Allowed/Denied\n    Gateway-&gt;&gt;API: Forward request\n    API-&gt;&gt;Auth: Validate token/scope\n    Auth--&gt;&gt;API: Claims\n    API-&gt;&gt;API: Validate input (Pydantic)\n    API-&gt;&gt;DB: Query/Write\n    DB--&gt;&gt;API: Data\n    API--&gt;&gt;Gateway: Response (+ ETag/Cache headers)\n    Gateway--&gt;&gt;Client: HTTPS response</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#design-principles","title":"Design Principles","text":"<ul> <li>Clarity over cleverness: predictable URLs, consistent verbs, stable contracts.</li> <li>Backward compatibility: versioning and additive changes; deprecate before removal.</li> <li>Idempotency: safe retries for non-GET operations.</li> <li>Least privilege: scope- and role-based access; tenant isolation.</li> <li>Defense in depth: TLS everywhere, input validation, WAF, rate limiting.</li> <li>Observability by default: correlation IDs, structured logs, metrics, traces.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#rest-vs-graphql-vs-grpc","title":"REST vs GraphQL vs gRPC","text":"<ul> <li>REST: simple, cache-friendly, great for public APIs; expressive with query params and headers.</li> <li>GraphQL: flexible querying; beware N+1, authorization at field-level, and cost limits.</li> <li>gRPC: high-performance binary protocol; strong contracts with Protobuf; great for service-to-service.</li> </ul> <p>Pick based on clients, performance profile, and operability. Many orgs mix: REST externally, gRPC internally.</p>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#resource-modeling-and-urls","title":"Resource Modeling and URLs","text":"<ul> <li>Plural resources: <code>/users</code>, <code>/users/{user_id}</code>.</li> <li>Nesting when it clarifies ownership: <code>/projects/{id}/members</code>.</li> <li>Filtering, sorting, pagination via query params:</li> <li><code>GET /orders?status=shipped&amp;sort=-created_at&amp;limit=50&amp;cursor=...</code></li> <li>Partial responses: <code>fields=name,email</code> or <code>Prefer: return=representation</code>.</li> <li>Standard headers: <code>ETag</code>, <code>If-None-Match</code>, <code>If-Match</code>, <code>Cache-Control</code>.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#versioning-strategy","title":"Versioning Strategy","text":"<ul> <li>URL-based: <code>/v1/...</code> for public APIs.</li> <li>Header-based: <code>Accept: application/vnd.example.v2+json</code> for internal APIs.</li> <li>Contract changes must be additive where possible. For breaking changes: run V1 and V2 concurrently; offer migration guides; set an end-of-life date.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#error-handling-and-problem-details","title":"Error Handling and Problem Details","text":"<p>Use consistent error shapes and HTTP status codes.</p> <pre><code>{\n  \"type\": \"https://docs.example.com/errors/rate_limited\",\n  \"title\": \"Too Many Requests\",\n  \"status\": 429,\n  \"detail\": \"Try again in 12 seconds\",\n  \"instance\": \"req_01J8Z6...\",\n  \"extras\": {\"retry_after\": 12}\n}\n</code></pre> <p>Map business errors to appropriate statuses: 400 (validation), 401/403 (authz), 404 (not found), 409 (conflict), 422 (semantic validation), 429 (rate limit), 5xx (server).</p>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#validation-schemas-and-openapi-fastapi-pydantic-v2","title":"Validation, Schemas, and OpenAPI (FastAPI + Pydantic v2)","text":"<pre><code>from typing import Optional, Literal\nfrom fastapi import FastAPI, HTTPException, Header, Depends, status\nfrom pydantic import BaseModel, Field, field_validator\n\napp = FastAPI(title=\"Orders API\", version=\"1.0.0\")\n\nclass CreateOrder(BaseModel):\n    product_id: str = Field(min_length=1)\n    quantity: int = Field(gt=0, le=1000)\n    currency: Literal[\"USD\", \"EUR\", \"INR\"]\n    note: Optional[str] = Field(default=None, max_length=280)\n\n    @field_validator(\"product_id\")\n    @classmethod\n    def validate_product_id(cls, v: str) -&gt; str:\n        if not v.startswith(\"prod_\"):\n            raise ValueError(\"product_id must start with 'prod_'\")\n        return v\n\nclass Order(BaseModel):\n    id: str\n    status: Literal[\"pending\", \"confirmed\"]\n    etag: str\n\ndef require_idempotency_key(x_idempotency_key: Optional[str] = Header(default=None)) -&gt; str:\n    if not x_idempotency_key:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"Missing X-Idempotency-Key\")\n    return x_idempotency_key\n\n@app.post(\"/v1/orders\", response_model=Order, status_code=status.HTTP_201_CREATED)\nasync def create_order(payload: CreateOrder, idemp_key: str = Depends(require_idempotency_key)) -&gt; Order:\n    # Pseudocode: check Redis for idempotency key; return stored response if exists\n    # save_idempotency(idemp_key, response_hash)\n    return Order(id=\"ord_123\", status=\"pending\", etag=\"W/\\\"abc123\\\"\")\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#pagination-and-filtering","title":"Pagination and Filtering","text":"<ul> <li>Prefer cursor-based pagination for mutable datasets; offset-based for stable datasets.</li> <li>Include <code>Link</code> headers and <code>next_cursor</code> in body. Keep page sizes bounded.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#concurrency-control-and-caching","title":"Concurrency Control and Caching","text":"<ul> <li>Use <code>ETag</code> with <code>If-Match</code> for optimistic concurrency updates.</li> <li>Use <code>ETag</code> with <code>If-None-Match</code> for conditional GETs to enable 304 responses.</li> <li>Set <code>Cache-Control</code> wisely; avoid caching personalized responses unless keyed by auth.</li> </ul> <pre><code>from fastapi import Request, Response\n\n@app.get(\"/v1/orders/{order_id}\")\nasync def get_order(order_id: str, request: Request) -&gt; Response:\n    etag = 'W/\"abc123\"'\n    if request.headers.get(\"if-none-match\") == etag:\n        return Response(status_code=304)\n    body = {\"id\": order_id, \"status\": \"confirmed\"}\n    return Response(content=app.openapi_json_dumps(body), media_type=\"application/json\", headers={\"ETag\": etag})\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#authentication-and-authorization","title":"Authentication and Authorization","text":"","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#options","title":"Options","text":"<ul> <li>API Keys: simple, rotate often; restrict by IP/referrer; least privilege.</li> <li>OAuth2/JWT: bearer tokens with scopes (<code>read:orders</code>, <code>write:orders</code>). Verify signature, issuer, audience, expiry, and <code>nbf</code>.</li> <li>mTLS: strong service-to-service auth; pin certs; rotate.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#scope-and-role-based-access","title":"Scope- and Role-based Access","text":"<pre><code>from typing import List\nfrom fastapi import Security\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\nbearer = HTTPBearer(auto_error=True)\n\ndef verify_jwt_and_scopes(creds: HTTPAuthorizationCredentials = Security(bearer), required_scopes: List[str] = []) -&gt; dict:\n    token = creds.credentials\n    # Pseudocode: decode and validate token (iss, aud, exp, nbf) and scopes\n    claims = {\"sub\": \"user_1\", \"scopes\": [\"read:orders\", \"write:orders\"], \"tenant\": \"acme\"}\n    if not set(required_scopes).issubset(set(claims[\"scopes\"])):\n        raise HTTPException(status_code=403, detail=\"insufficient_scope\")\n    return claims\n\n@app.get(\"/v1/orders\", dependencies=[Depends(lambda: verify_jwt_and_scopes(required_scopes=[\"read:orders\"]))])\nasync def list_orders() -&gt; dict:\n    return {\"data\": []}\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#multi-tenant-isolation","title":"Multi-tenant Isolation","text":"<ul> <li>Include a <code>tenant_id</code> claim and enforce it in every query.</li> <li>Use row-level security (RLS) in the database; never trust the client to filter tenants.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#input-hardening-and-output-encoding","title":"Input Hardening and Output Encoding","text":"<ul> <li>Validate types, ranges, and formats with Pydantic; reject unknown fields.</li> <li>Enforce maximum sizes: body, arrays, strings. Limit uploaded file size and type.</li> <li>Normalize Unicode and strip control characters when relevant.</li> <li>Always JSON-encode responses and set <code>Content-Type: application/json; charset=utf-8</code>.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#rate-limiting-and-abuse-protection","title":"Rate Limiting and Abuse Protection","text":"<ul> <li>Combine IP + user + token keys. Separate read/write limits.</li> <li>Use sliding window + burst; add Retry-After headers.</li> </ul> <pre><code>import time\nimport hashlib\n\nFAKE_BUCKET: dict[str, list[float]] = {}\n\ndef rate_limit(key: str, limit: int, window_seconds: int = 60) -&gt; None:\n    now = time.time()\n    bucket = FAKE_BUCKET.setdefault(key, [])\n    FAKE_BUCKET[key] = [t for t in bucket if t &gt; now - window_seconds]\n    if len(FAKE_BUCKET[key]) &gt;= limit:\n        raise HTTPException(status_code=429, detail=\"rate_limited\")\n    FAKE_BUCKET[key].append(now)\n\n@app.post(\"/v1/orders/confirm\")\nasync def confirm_order() -&gt; dict:\n    key = hashlib.sha256(b\"anonymous\").hexdigest()\n    rate_limit(key, limit=5, window_seconds=60)\n    return {\"status\": \"ok\"}\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#webhooks-security","title":"Webhooks Security","text":"<ul> <li>Sign payloads with an HMAC shared secret; include timestamp to prevent replay.</li> <li>Verify using constant-time comparison.</li> </ul> <pre><code>import hmac, hashlib\nfrom fastapi import Request\n\ndef verify_webhook_signature(request: Request, secret: str) -&gt; None:\n    signature = request.headers.get(\"x-signature\")\n    timestamp = request.headers.get(\"x-timestamp\")\n    if not signature or not timestamp:\n        raise HTTPException(status_code=400, detail=\"missing_signature\")\n    payload = (timestamp + \".\" + (request._body.decode() if hasattr(request, \"_body\") else \"\")).encode()\n    expected = hmac.new(secret.encode(), payload, hashlib.sha256).hexdigest()\n    if not hmac.compare_digest(signature, expected):\n        raise HTTPException(status_code=401, detail=\"invalid_signature\")\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#transport-security-tls-and-headers","title":"Transport Security (TLS) and Headers","text":"<ul> <li>Enforce TLS 1.2+; prefer TLS 1.3; disable weak ciphers.</li> <li>HSTS (<code>Strict-Transport-Security</code>), <code>X-Content-Type-Options: nosniff</code>, <code>Referrer-Policy: no-referrer</code>, <code>Content-Security-Policy</code> for portals.</li> <li>Enable <code>gzip/br</code> compression; negotiate via <code>Accept-Encoding</code>.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#cors-and-csrf","title":"CORS and CSRF","text":"<p>For browser clients, configure CORS precisely; use CSRF tokens for cookie-based sessions.</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://app.example.com\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PATCH\", \"DELETE\"],\n    allow_headers=[\"Authorization\", \"Content-Type\", \"X-Idempotency-Key\"],\n)\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#observability-logging-metrics-tracing","title":"Observability: Logging, Metrics, Tracing","text":"<ul> <li>Generate a <code>request_id</code> per request; include it in logs and responses.</li> <li>Emit structured JSON logs; include user, tenant, route, latency, status.</li> <li>Expose Prometheus metrics; instrument with OpenTelemetry for traces.</li> </ul> <pre><code>import uuid\nimport time\nfrom fastapi import Request\n\n@app.middleware(\"http\")\nasync def add_request_context(request: Request, call_next):\n    request_id = str(uuid.uuid4())\n    start = time.time()\n    response = await call_next(request)\n    response.headers[\"x-request-id\"] = request_id\n    response.headers[\"server-timing\"] = f\"app;dur={(time.time()-start)*1000:.1f}\"\n    return response\n</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#reliability-timeouts-retries-circuit-breakers","title":"Reliability: Timeouts, Retries, Circuit Breakers","text":"<ul> <li>Server timeouts must be lower than client timeouts. Never block indefinitely.</li> <li>Retries only on idempotent operations; use exponential backoff + jitter.</li> <li>Circuit breakers to shed load and protect dependencies.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#data-privacy-and-compliance","title":"Data Privacy and Compliance","text":"<ul> <li>Classify data (public/internal/confidential/PII). Encrypt at rest and in transit.</li> <li>Minimize logs; redact secrets and PII. Respect data residency.</li> <li>Provide data export and deletion endpoints where required (GDPR/CCPA).</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#change-management-and-deprecation","title":"Change Management and Deprecation","text":"<ul> <li>Communicate changes: changelog, email, and deprecation headers.</li> <li>Provide a sunset date and migration guide; support old and new versions in parallel.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit-test validators and authorization rules.</li> <li>Contract tests from OpenAPI; validate examples and <code>schemaFormat</code>.</li> <li>Load tests for hot paths; chaos experiments for failure modes.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#deployment-topology-reference","title":"Deployment Topology (Reference)","text":"<pre><code>flowchart LR\n    A[Client] --&gt;|HTTPS| B(API Gateway/WAF)\n    B --&gt; C{Rate Limit}\n    C --&gt;|Allow| D(FastAPI Apps)\n    C --&gt;|Deny| E[(429)]\n    D --&gt; F[(Cache/CDN)]\n    D --&gt; G[(DB with RLS)]\n    D --&gt; H[Auth / OIDC]\n    D --&gt; I[Queue]\n    I --&gt; J[Workers]</code></pre>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#checklist-copypaste","title":"Checklist (Copy/Paste)","text":"<ul> <li>AuthN: JWT validated (iss, aud, exp, nbf), scopes enforced</li> <li>AuthZ: RBAC/ABAC, tenant isolation, RLS in DB</li> <li>Transport: TLS 1.2+, HSTS, secure headers, compression</li> <li>Input: strict schemas, size limits, allowlist validation</li> <li>Output: content-type set, ETag/Cache-Control</li> <li>Idempotency: keys for POST; retries safe</li> <li>Rate limiting: per-IP/user/token; 429 with Retry-After</li> <li>Observability: request_id, structured logs, traces, metrics</li> <li>Reliability: timeouts, backoff, circuit breakers</li> <li>Change mgmt: versioning, deprecation plan, migration docs</li> <li>Privacy: PII minimization/redaction, encryption at rest/in transit</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#faq-common-questions","title":"FAQ: Common Questions","text":"<ul> <li>\"Should I use UUIDs or integers for IDs?\" \u2192 UUIDv7 is a good default; avoid guessable IDs.</li> <li>\"One big endpoint or many small ones?\" \u2192 Model business resources; avoid RPC over HTTP unless using gRPC.</li> <li>\"When to break a monolith?\" \u2192 When independent scaling, deployment cadence, or ownership boundaries demand it.</li> <li>\"Do I need an API gateway?\" \u2192 Yes for public APIs (WAF, auth offload, rate limiting, routing). Internal-only can defer with service mesh.</li> <li>\"How do I prevent replay attacks?\" \u2192 Require idempotency keys and/or signed, timestamped requests; enforce short clock skew.</li> <li>\"What about GraphQL security?\" \u2192 Enforce query depth/complexity limits; field-level auth; persisted queries.</li> </ul>","tags":["API","Security","FastAPI","Design"]},{"location":"secure-scalable-apis-guide/#conclusion","title":"Conclusion","text":"<p>Great APIs are predictable, secure, and observable. Start with clear resource modeling, layer defenses, and instrument from day one. Iterate safely with versioning and robust test coverage. The practices above form a pragmatic baseline you can tailor to your domain.</p>","tags":["API","Security","FastAPI","Design"]},{"location":"git-101-cheat-sheet/","title":"Git 101 \u2013 Commands and Workflows Cheat Sheet","text":"<p>A quick, task-oriented Git reference. Pair this with the in-depth guide for concepts and best practices.</p>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#minimal-mental-model","title":"Minimal Mental Model","text":"<pre><code>graph LR\n  WD[Working Dir] -- add --&gt; ST[Staging]\n  ST -- commit --&gt; REPO[Local Repo]\n  REPO -- push --&gt; ORI[Origin]\n  ORI -- fetch/pull --&gt; REPO</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#setup","title":"Setup","text":"<pre><code>git --version\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\ngit config --global init.defaultBranch main\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#create-or-clone","title":"Create or Clone","text":"<pre><code>git init\ngit clone &lt;url&gt;\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#status-and-diffs","title":"Status and Diffs","text":"<pre><code>git status\ngit diff               # unstaged\ngit diff --staged      # staged vs HEAD\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#stage-and-commit","title":"Stage and Commit","text":"<pre><code>git add &lt;path&gt;\ngit add -p             # interactive hunks\ngit commit -m \"feat: message\"\ngit commit --amend     # edit last commit\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#branching","title":"Branching","text":"<pre><code>git branch\ngit switch -c feature/x\ngit switch main\ngit branch -d feature/x\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#sync-with-remote","title":"Sync with Remote","text":"<pre><code>git remote -v\ngit fetch\ngit pull               # merge\ngit pull --rebase      # rebase\ngit push -u origin my-branch\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#merge-vs-rebase","title":"Merge vs Rebase","text":"<pre><code>git switch my-branch &amp;&amp; git merge main\ngit switch my-branch &amp;&amp; git rebase main\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#resolve-conflicts","title":"Resolve Conflicts","text":"<pre><code>git status\n# edit files, remove markers\ngit add &lt;file&gt;\ngit commit                 # after merge\ngit rebase --continue      # during rebase\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#stash-work","title":"Stash Work","text":"<pre><code>git stash push -m \"wip\"\ngit stash list\ngit stash pop\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#undo-safely","title":"Undo Safely","text":"<pre><code>git restore --staged &lt;file&gt;   # unstage\ngit restore &lt;file&gt;            # discard local edits\ngit revert &lt;sha&gt;              # new commit to undo\ngit reset --soft HEAD~1       # keep changes, drop last commit\ngit reflog                    # find lost commits\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#tags-and-releases","title":"Tags and Releases","text":"<pre><code>git tag -a v1.0.0 -m \"msg\"\ngit push --tags\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#ignore-and-clean","title":"Ignore and Clean","text":"<pre><code>echo \"node_modules/\" &gt;&gt; .gitignore\ngit clean -fdx   # dangerous: removes untracked files\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#authentication-quick","title":"Authentication (Quick)","text":"<pre><code># HTTPS + PAT\ngit clone https://github.com/owner/repo.git\n\n# SSH\nssh-keygen -t ed25519 -C \"you@example.com\"\nssh-add ~/.ssh/id_ed25519\ngit clone git@github.com:owner/repo.git\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#conventional-commits-optional","title":"Conventional Commits (Optional)","text":"<pre><code>feat(auth): add oauth login\nfix(api): handle null pointer in user service\nchore(ci): update node to 20\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#common-one-liners","title":"Common One-Liners","text":"<pre><code># See last commit summary\ngit log -1 --stat\n\n# Interactive rebase last 5 commits\ngit rebase -i HEAD~5\n\n# Squash branch onto main\ngit switch my-branch &amp;&amp; git rebase -i main\n</code></pre>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"git-101-cheat-sheet/#quick-pr-flow-github","title":"Quick PR Flow (GitHub)","text":"<pre><code>git switch -c feat/x\n# edit, add, commit\ngit push -u origin feat/x\n# open PR on GitHub\n</code></pre> <p>See also: the full guide \u201cThe Definitive Guide to Version Control with Git and GitHub\u201d.</p>","tags":["Git","Cheat Sheet","Version Control"]},{"location":"pandas-missing-values/","title":"Handle Missing Values in Pandas Without Losing Information","text":"<p>Missing values are inevitable in real-world datasets. This guide covers proven methods to handle missing data in pandas without compromising data integrity or analytical accuracy.</p>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#what-are-missing-values-in-pandas","title":"What Are Missing Values in Pandas","text":"<p>Missing values in pandas are represented as <code>NaN</code> (Not a Number), <code>None</code>, or <code>NaT</code> (Not a Time) for datetime objects. These occur due to:</p> <ul> <li>Data collection errors</li> <li>System failures during data transmission</li> <li>Intentionally left blank fields</li> <li>Data merging operations</li> <li>File corruption</li> </ul>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#how-to-detect-missing-values","title":"How to Detect Missing Values","text":"Basic Detection MethodsAdvanced Detection Techniques <pre><code>import pandas as pd\nimport numpy as np\n\n# Create sample dataset with missing values\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', None, 'David'],\n    'age': [25, np.nan, 30, 35],\n    'salary': [50000, 60000, np.nan, 70000],\n    'department': ['IT', 'HR', 'IT', None]\n})\n\n# Check for missing values\nprint(df.isnull().sum())\nprint(df.info())\n</code></pre> <pre><code># Percentage of missing values per column\nmissing_percentage = (df.isnull().sum() / len(df)) * 100\nprint(missing_percentage)\n\n# Identify rows with any missing values\nrows_with_missing = df[df.isnull().any(axis=1)]\nprint(rows_with_missing)\n\n# Count missing values per row\ndf['missing_count'] = df.isnull().sum(axis=1)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#methods-to-handle-missing-values","title":"Methods to Handle Missing Values","text":"","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#1-removal-methods","title":"1. Removal Methods","text":"Drop Rows with Missing ValuesDrop Columns with Missing Values <pre><code># Drop rows with any missing values\ndf_dropped_rows = df.dropna()\n\n# Drop rows with missing values in specific columns\ndf_dropped_specific = df.dropna(subset=['age', 'salary'])\n\n# Drop rows with all missing values\ndf_dropped_all = df.dropna(how='all')\n</code></pre> <pre><code># Drop columns with any missing values\ndf_dropped_cols = df.dropna(axis=1)\n\n# Drop columns with more than 50% missing values\nthreshold = len(df) * 0.5\ndf_dropped_threshold = df.dropna(axis=1, thresh=threshold)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#2-imputation-methods","title":"2. Imputation Methods","text":"Simple ImputationForward and Backward FillInterpolation Methods <pre><code># Fill with constant value\ndf_filled_constant = df.fillna(0)\n\n# Fill with mean for numeric columns\nnumeric_columns = df.select_dtypes(include=[np.number]).columns\ndf[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())\n\n# Fill with median\ndf[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].median())\n\n# Fill with mode for categorical columns\ncategorical_columns = df.select_dtypes(include=['object']).columns\nfor col in categorical_columns:\n    df[col] = df[col].fillna(df[col].mode()[0])\n</code></pre> <pre><code># Forward fill (use previous value)\ndf_ffill = df.fillna(method='ffill')\n\n# Backward fill (use next value)\ndf_bfill = df.fillna(method='bfill')\n\n# Combine both methods\ndf_combined = df.fillna(method='ffill').fillna(method='bfill')\n</code></pre> <pre><code># Linear interpolation for time series\ndf_interpolated = df.interpolate(method='linear')\n\n# Polynomial interpolation\ndf_poly = df.interpolate(method='polynomial', order=2)\n\n# Time-based interpolation for datetime index\ndf_time = df.interpolate(method='time')\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#3-advanced-imputation-techniques","title":"3. Advanced Imputation Techniques","text":"","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#using-scikit-learn-imputers","title":"Using Scikit-learn Imputers","text":"<pre><code>from sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\n# Simple imputer with strategy\nimputer_mean = SimpleImputer(strategy='mean')\ndf_numeric = df.select_dtypes(include=[np.number])\ndf_imputed_mean = pd.DataFrame(\n    imputer_mean.fit_transform(df_numeric),\n    columns=df_numeric.columns\n)\n\n# KNN imputation\nknn_imputer = KNNImputer(n_neighbors=3)\ndf_knn_imputed = pd.DataFrame(\n    knn_imputer.fit_transform(df_numeric),\n    columns=df_numeric.columns\n)\n\n# Iterative imputation (MICE)\niterative_imputer = IterativeImputer(random_state=42)\ndf_iterative = pd.DataFrame(\n    iterative_imputer.fit_transform(df_numeric),\n    columns=df_numeric.columns\n)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#column-specific-handling-strategies","title":"Column-Specific Handling Strategies","text":"Numeric ColumnsCategorical Columns <pre><code>def handle_numeric_missing(df, column, method='mean'):\n    \"\"\"Handle missing values in numeric columns\"\"\"\n    if method == 'mean':\n        return df[column].fillna(df[column].mean())\n    elif method == 'median':\n        return df[column].fillna(df[column].median())\n    elif method == 'mode':\n        return df[column].fillna(df[column].mode()[0])\n    elif method == 'interpolate':\n        return df[column].interpolate()\n    else:\n        raise ValueError(\"Method must be 'mean', 'median', 'mode', or 'interpolate'\")\n\n# Apply to age column\ndf['age_filled'] = handle_numeric_missing(df, 'age', method='median')\n</code></pre> <pre><code>def handle_categorical_missing(df, column, method='mode'):\n    \"\"\"Handle missing values in categorical columns\"\"\"\n    if method == 'mode':\n        return df[column].fillna(df[column].mode()[0])\n    elif method == 'unknown':\n        return df[column].fillna('Unknown')\n    elif method == 'frequent':\n        most_frequent = df[column].value_counts().index[0]\n        return df[column].fillna(most_frequent)\n    else:\n        raise ValueError(\"Method must be 'mode', 'unknown', or 'frequent'\")\n\n# Apply to department column\ndf['department_filled'] = handle_categorical_missing(df, 'department', method='mode')\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#domain-specific-imputation","title":"Domain-Specific Imputation","text":"Group-Based ImputationConditional Imputation <pre><code># Fill missing values based on group statistics\ndf['salary_group_filled'] = df.groupby('department')['salary'].transform(\n    lambda x: x.fillna(x.mean())\n)\n\n# Fill missing values with group mode\ndf['age_group_filled'] = df.groupby('department')['age'].transform(\n    lambda x: x.fillna(x.median())\n)\n</code></pre> <pre><code># Conditional filling based on other columns\ndef conditional_fill(row):\n    if pd.isna(row['salary']):\n        if row['department'] == 'IT':\n            return 55000  # Average IT salary\n        elif row['department'] == 'HR':\n            return 45000  # Average HR salary\n        else:\n            return 50000  # Default salary\n    return row['salary']\n\ndf['salary_conditional'] = df.apply(conditional_fill, axis=1)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#validation-and-quality-checks","title":"Validation and Quality Checks","text":"","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#validate-imputation-results","title":"Validate Imputation Results","text":"<pre><code>def validate_imputation(original_df, imputed_df):\n    \"\"\"Validate imputation results\"\"\"\n    print(\"Original missing values:\", original_df.isnull().sum().sum())\n    print(\"Imputed missing values:\", imputed_df.isnull().sum().sum())\n\n    # Check if distribution is preserved\n    for col in original_df.select_dtypes(include=[np.number]).columns:\n        if col in imputed_df.columns:\n            original_mean = original_df[col].mean()\n            imputed_mean = imputed_df[col].mean()\n            print(f\"{col} - Original mean: {original_mean:.2f}, Imputed mean: {imputed_mean:.2f}\")\n\nvalidate_imputation(df, df_imputed_mean)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#track-imputation-changes","title":"Track Imputation Changes","text":"<pre><code># Create indicator variables for imputed values\nfor col in df.columns:\n    if df[col].isnull().any():\n        df[f'{col}_was_missing'] = df[col].isnull()\n\n# Analyze impact of missing values\nmissing_impact = df.groupby('salary_was_missing')['age'].mean()\nprint(missing_impact)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#best-practices","title":"Best Practices","text":"","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#1-analyze-missing-data-patterns","title":"1. Analyze Missing Data Patterns","text":"<pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Visualize missing data patterns\nplt.figure(figsize=(10, 6))\nsns.heatmap(df.isnull(), cbar=True, yticklabels=False)\nplt.title('Missing Data Patterns')\nplt.show()\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#2-choose-appropriate-method","title":"2. Choose Appropriate Method","text":"<ul> <li>Listwise deletion: When missing data is less than 5% and random</li> <li>Mean/Median imputation: For normally distributed numeric data</li> <li>Mode imputation: For categorical variables</li> <li>Interpolation: For time series data</li> <li>KNN imputation: When missing data has patterns</li> <li>MICE: For complex missing data mechanisms</li> </ul>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#3-document-imputation-decisions","title":"3. Document Imputation Decisions","text":"<pre><code># Create imputation log\nimputation_log = {\n    'column': [],\n    'missing_count': [],\n    'missing_percentage': [],\n    'imputation_method': [],\n    'imputation_value': []\n}\n\nfor col in df.columns:\n    missing_count = df[col].isnull().sum()\n    if missing_count &gt; 0:\n        imputation_log['column'].append(col)\n        imputation_log['missing_count'].append(missing_count)\n        imputation_log['missing_percentage'].append((missing_count / len(df)) * 100)\n        # Add method and value used\n\nimputation_df = pd.DataFrame(imputation_log)\nprint(imputation_df)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#1-data-leakage-in-imputation","title":"1. Data Leakage in Imputation","text":"<pre><code># Wrong: Using entire dataset statistics\n# df['salary'] = df['salary'].fillna(df['salary'].mean())\n\n# Correct: Use only training set statistics\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test = train_test_split(df, test_size=0.2, random_state=42)\n\n# Calculate imputation values from training set only\ntrain_mean = X_train['salary'].mean()\nX_train['salary'] = X_train['salary'].fillna(train_mean)\nX_test['salary'] = X_test['salary'].fillna(train_mean)\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#2-ignoring-missing-data-mechanism","title":"2. Ignoring Missing Data Mechanism","text":"<pre><code># Test if missing data is random\nfrom scipy.stats import chi2_contingency\n\n# Create missing indicator\ndf['salary_missing'] = df['salary'].isnull()\n\n# Test relationship with other variables\ncontingency_table = pd.crosstab(df['department'], df['salary_missing'])\nchi2, p_value, dof, expected = chi2_contingency(contingency_table)\nprint(f\"P-value: {p_value}\")  # If p &lt; 0.05, missing data is not random\n</code></pre>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#integration-with-data-pipelines","title":"Integration with Data Pipelines","text":"<p>When implementing missing value handling in production environments, consider using automated data cleaning pipelines. This approach ensures consistent handling across different datasets and reduces manual intervention.</p> <p>For complex missing data scenarios requiring domain expertise and automated pipeline setup, consider professional Data Cleaning &amp; Analysis Services that provide end-to-end solutions.</p>","tags":["Test","Tech","Python"]},{"location":"pandas-missing-values/#conclusion","title":"Conclusion","text":"<p>Handling missing values effectively requires understanding your data, choosing appropriate methods, and validating results. The key is to preserve data integrity while maintaining statistical properties of your dataset. Always document your imputation strategy and test its impact on downstream analysis or model performance. </p>","tags":["Test","Tech","Python"]},{"location":"system-architecture-comprehensive-guide/","title":"System Architecture \u2014 A Comprehensive, Practical Guide","text":"<p>Designing and evolving system architecture is about making informed trade\u2011offs. This guide provides a practical, opinionated walkthrough of the core concepts, patterns, and decisions you need to build scalable, reliable, and cost\u2011efficient systems\u2014plus answers to the most common questions engineers and architects ask.</p>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#what-is-system-architecture","title":"What Is System Architecture","text":"<p>System architecture describes the high\u2011level structure of a software system: the components, their responsibilities, and how they interact. It balances non\u2011functional requirements (NFRs) such as scalability, reliability, performance, security, operability, and cost.</p> <ul> <li>Functional requirements: What the system does (features, endpoints, business rules).</li> <li>Non\u2011functional requirements (NFRs): How well the system does it (SLOs, throughput, latency, availability, durability, security, maintainability).</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#reference-architecture-at-a-glance","title":"Reference Architecture at a Glance","text":"<pre><code>%%{init: { 'flowchart': { 'htmlLabels': true } }}%%\nflowchart TB\n    subgraph Client\n        U[Web / Mobile / API Client]\n    end\n\n    subgraph Edge\n        CDN[CDN]\n        WAF[WAF]\n        LB[Load Balancer]\n        AG[API Gateway]\n    end\n\n    subgraph Services\n        A[\"App Service&lt;br/&gt;(Monolith or Microservices)\"]\n        MQ[\"Message Broker&lt;br/&gt;(Kafka/RabbitMQ)\"]\n        CRON[Schedulers / Workers]\n    end\n\n    subgraph Data\n        DB[(Primary DB \\n SQL/NoSQL)]\n        CACHE[(Cache \\n Redis/Memcached)]\n        SEARCH[(Search \\n ES/OpenSearch)]\n        OLAP[(Analytics DW \\n BigQuery/Redshift)]\n        OBJ[(Object Storage \\n S3/GCS)]\n    end\n\n    subgraph Observability\n        LOGS[Logs]\n        METRICS[Metrics]\n        TRACES[Traces]\n    end\n\n    U --&gt; CDN --&gt; WAF --&gt; LB --&gt; AG --&gt; A\n    A --&gt; CACHE\n    CACHE --&gt; A\n    A --&gt; DB\n    DB --&gt; A\n    A --&gt; MQ\n    MQ --&gt; CRON\n    A --&gt; SEARCH\n    A --&gt; OBJ\n    CRON --&gt; DB\n    CRON --&gt; OBJ\n\n    A --&gt; LOGS\n    A --&gt; METRICS\n    A --&gt; TRACES</code></pre>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#core-architectural-styles","title":"Core Architectural Styles","text":"Layered (N\u2011Tier)Modular MonolithMicroservicesEvent\u2011Driven <ul> <li>Idea: Separate presentation, application, domain, and data layers.</li> <li>Pros: Simple, clear separation; great for small to medium apps.</li> <li>Cons: Can devolve into an anemic domain; boundaries erode over time.</li> <li>Use when: Team is small; domain is evolving; deployment simplicity matters.</li> </ul> <ul> <li>Idea: One deployable unit with strict internal modules and boundaries.</li> <li>Pros: Transactional consistency, simple ops, easier refactoring.</li> <li>Cons: One failure can impact more; scaling is coarse.</li> <li>Use when: You want speed of delivery with discipline; future microservices possible.</li> </ul> <ul> <li>Idea: Independent services with clear bounded contexts.</li> <li>Pros: Independent scaling/deployment; team autonomy; polyglot persistence.</li> <li>Cons: Operational complexity; distributed transactions; consistency challenges.</li> <li>Use when: Org is large; domains are well understood; platform engineering exists.</li> </ul> <ul> <li>Idea: Publish/subscribe events for loose coupling and async processing.</li> <li>Pros: Scalable, resilient, extensible.</li> <li>Cons: Debuggability; eventual consistency; schema/versioning discipline needed.</li> <li>Use when: High throughput, integrations, or async workflows are key.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#data-and-consistency-fundamentals","title":"Data and Consistency Fundamentals","text":"<ul> <li>ACID vs BASE: Strong consistency vs eventual consistency trade\u2011off.</li> <li>CAP Theorem: Under network partitions, pick availability or consistency.</li> <li>Consistency models: Strong, causal, read\u2011your\u2011writes, eventual.</li> <li>Idempotency: Same request can be safely retried; key for reliability.</li> <li>Exactly\u2011once is aspirational: Aim for at\u2011least\u2011once + idempotency.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#typical-readwrite-flow","title":"Typical Read/Write Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant G as API Gateway\n    participant S as Service\n    participant R as Cache (Redis)\n    participant D as Database\n\n    C-&gt;&gt;G: GET /products/123\n    G-&gt;&gt;S: Forward request\n    S-&gt;&gt;R: GET product:123\n    alt Cache hit\n        R--&gt;&gt;S: Value\n        S--&gt;&gt;G: 200 OK + Data\n        G--&gt;&gt;C: 200 OK + Data\n    else Cache miss\n        R--&gt;&gt;S: null\n        S-&gt;&gt;D: SELECT * FROM products WHERE id=123\n        D--&gt;&gt;S: Row\n        S-&gt;&gt;R: SET product:123 (TTL=300s)\n        S--&gt;&gt;G: 200 OK + Data\n        G--&gt;&gt;C: 200 OK + Data\n    end</code></pre>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#scalability-patterns","title":"Scalability Patterns","text":"<ul> <li>Vertical scaling: Bigger machines; quick win; diminishing returns.</li> <li>Horizontal scaling: More instances; needs statelessness and externalized state.</li> <li>Partitioning/Sharding: Split data by key or range; consider rebalancing.</li> <li>Replication: Read replicas for scale; async replicas increase staleness risk.</li> <li>Caching: CDN, application cache (Redis), database cache; always set TTLs and invalidation rules.</li> <li>Queueing &amp; Backpressure: Smooth spikes with buffers; implement consumer concurrency and rate limits.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#reliability-and-resilience","title":"Reliability and Resilience","text":"<ul> <li>Timeouts and Retries: Always set sane timeouts; use exponential backoff + jitter.</li> <li>Circuit Breakers: Fail fast when dependencies degrade; protect resources.</li> <li>Bulkheads: Isolate resource pools (threads/connections) per dependency.</li> <li>Dead\u2011letter queues: Capture poison messages for later review.</li> <li>Graceful degradation: Serve cached or partial data when possible.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#datastores-and-when-to-use-them","title":"Datastores and When to Use Them","text":"Relational (PostgreSQL/MySQL)Document (MongoDB/Firestore)Key\u2011Value (Redis/Memcached)Wide\u2011Column (Cassandra/Scylla)Search (Elasticsearch/OpenSearch)Analytics (BigQuery/Redshift/Snowflake) <ul> <li>Strong consistency, joins, transactions. Best for OLTP and complex relationships.</li> <li>Scale via read replicas, partitioning, and careful indexing.</li> </ul> <ul> <li>Flexible schemas, nested documents. Great for content/user profiles.</li> </ul> <ul> <li>Sub\u2011millisecond reads/writes; perfect for caching, sessions, locks.</li> </ul> <ul> <li>High write throughput, linear horizontal scalability; model queries up\u2011front.</li> </ul> <ul> <li>Full\u2011text search, aggregations; eventual consistency; pipeline ingestion.</li> </ul> <ul> <li>OLAP, columnar storage, separation of storage/compute; not for OLTP.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#messaging-and-async-workflows","title":"Messaging and Async Workflows","text":"<ul> <li>Brokers: Kafka (log\u2011based, high throughput), RabbitMQ (AMQP, routing), SQS/PubSub (managed).</li> <li>Patterns: Pub/Sub, Work Queues, Event Sourcing, CQRS, Saga for distributed transactions.</li> </ul> <pre><code>stateDiagram-v2\n    [*] --&gt; Pending\n    Pending --&gt; Reserved: Reserve inventory\n    Reserved --&gt; Paid: Payment succeeded\n    Reserved --&gt; Pending: Payment failed (retry)\n    Paid --&gt; Shipped: Fulfill order\n    Shipped --&gt; [*]</code></pre>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#api-gateway-bff-and-edge","title":"API Gateway, BFF, and Edge","text":"<ul> <li>API Gateway: Routing, authentication, rate limiting, request/response transformation.</li> <li>BFF (Backend for Frontend): Tailored APIs per client (web/mobile) to reduce over/under\u2011fetching.</li> <li>Edge (CDN/WAF): Caching static and semi\u2011static content; threat mitigation at the perimeter.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#security-by-design","title":"Security by Design","text":"<ul> <li>AuthN/Z: OAuth 2.1/OIDC for delegated auth; enforce least privilege and scopes.</li> <li>Data protection: TLS in transit; at\u2011rest encryption; KMS\u2011managed keys.</li> <li>Secrets: Use secret managers; never store secrets in env files or images.</li> <li>Input validation: Validate at the edge and service boundary; sanitize outputs.</li> <li>Auditability: Immutable, tamper\u2011evident logs for security events.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#observability-and-operability","title":"Observability and Operability","text":"<ul> <li>Metrics: RED/USE/Golden signals; per\u2011service SLOs with error budgets.</li> <li>Logs: Structured JSON, correlation IDs; centralize and retain with budgets.</li> <li>Traces: Distributed tracing with consistent propagation headers.</li> <li>Runbooks: Document failure modes and standard operating procedures.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#deployments-and-release-strategies","title":"Deployments and Release Strategies","text":"<ul> <li>Blue/Green: Two production environments; instant switch; higher cost.</li> <li>Canary: Gradual rollout with automated rollback on regression.</li> <li>Feature Flags: Decouple deploy from release; enable progressive delivery.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#cost-awareness","title":"Cost Awareness","text":"<ul> <li>Right\u2011sizing: Match instance sizes to baselines; autoscale on credible signals.</li> <li>Storage classes: Hot vs warm vs cold tiers; lifecycle policies.</li> <li>Data egress: Minimize cross\u2011region and cross\u2011cloud traffic.</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#nonfunctional-requirements-nfr-checklist","title":"Non\u2011Functional Requirements (NFR) Checklist","text":"<ul> <li>SLOs for latency, availability, and error rates defined and monitored</li> <li>Capacity plan and autoscaling policies validated under load tests</li> <li>Backups, restore drills, and disaster recovery RPO/RTO defined</li> <li>Timeouts, retries with backoff, circuit breakers configured</li> <li>Idempotency for writes and exactly\u2011once semantics avoided</li> <li>Rate limits, quotas, and surge protection in place</li> <li>Security scanning (SAST/DAST), dependencies, base image hardening</li> <li>Observability: metrics, logs, traces, dashboards, alerts, runbooks</li> <li>Cost budgets and anomaly detection alerts</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#architecture-decision-records-adr","title":"Architecture Decision Records (ADR)","text":"<p>Document trade\u2011offs explicitly. A lightweight ADR captures context, decision, alternatives, and consequences. Keep ADRs short, versioned, and linked to incidents or KPIs when decisions change.</p>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#common-questions-and-straight-answers","title":"Common Questions and Straight Answers","text":"Should I start with microservices?SQL or NoSQL?How many replicas do I need?How do I ensure safe retries?What about exactly\u2011once delivery?Do I need a message broker?How do I handle schema changes?When should I shard?How do I choose cache TTLs?What causes cascading failures? <p>No. Start with a well\u2011structured modular monolith. Split only when boundaries and scaling pain are clear.</p> <p>Default to SQL. Move specific workloads to NoSQL if access patterns or scale demand it.</p> <p>At least 2 per AZ for HA; 3 for quorum\u2011based systems. Validate with load tests.</p> <p>Make write endpoints idempotent (idempotency keys) and use backoff + jitter.</p> <p>Prefer at\u2011least\u2011once with idempotent consumers. Exactly\u2011once is costly and brittle in practice.</p> <p>Use one for async workloads, spikes, or integrations. Avoid if synchronous request/response suffices and throughput is modest.</p> <p>Backward\u2011compatible changes first (additive), deploy readers, then writers; run dual\u2011writes if needed.</p> <p>Only after exhausting vertical scale and read replicas. Choose a shard key that evenly distributes load and minimizes cross\u2011shard queries.</p> <p>Base on data volatility and correctness tolerance. Prefer short TTLs and soft invalidation over long stale data.</p> <p>Tight coupling, unbounded concurrency, and missing timeouts. Use bulkheads, backpressure, and circuit breakers.</p>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#production-readiness-checklist","title":"Production Readiness Checklist","text":"<ul> <li>Health checks (liveness/readiness/startup) and graceful shutdown</li> <li>Config via env/secret manager; immutable container images</li> <li>Canary strategy and automated rollback hooks</li> <li>Per\u2011endpoint SLOs and error budgets defined</li> <li>Rate limiting and abuse detection at the edge</li> <li>Data retention, privacy, PII handling, and audit trails</li> <li>Access control: least privilege IAM, scoped tokens, and short\u2011lived creds</li> <li>Runbook for all critical failure modes; on\u2011call rotation defined</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#example-request-journey-through-the-stack","title":"Example: Request Journey Through the Stack","text":"<pre><code>flowchart LR\n    C[Client] --&gt; E[Edge: CDN/WAF]\n    E --&gt; L[Load Balancer]\n    L --&gt; G[API Gateway]\n    G --&gt; S[Service]\n    S --&gt;|read| Rc[(Redis Cache)]\n    S --&gt;|write| Db[(Primary DB)]\n    S --&gt;|async| Q[(Broker)]\n    Q --&gt; W[Worker]\n    W --&gt; Db</code></pre>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#how-to-evolve-architecture-safely","title":"How to Evolve Architecture Safely","text":"<ol> <li>Define KPIs and SLOs. Measure before you change.</li> <li>Make small, reversible steps. Use flags and canaries.</li> <li>Prefer schema\u2011first and contract tests for APIs and events.</li> <li>Automate. Everything. Testing, security scans, provisioning, rollbacks.</li> <li>Document decisions (ADRs) and post\u2011incident learnings.</li> </ol>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#further-reading","title":"Further Reading","text":"<ul> <li>Designing Data\u2011Intensive Applications (Kleppmann)</li> <li>Site Reliability Engineering (Beyer et al.)</li> <li>Release It! (Nygard)</li> <li>The Twelve\u2011Factor App</li> </ul>","tags":["Architecture","Scalability","Reliability"]},{"location":"system-architecture-comprehensive-guide/#conclusion","title":"Conclusion","text":"<p>Good architecture maximizes option value by keeping systems observable, evolvable, and resilient. Start simple, measure relentlessly, and introduce complexity only when the data demands it. The best designs are those your team can operate confidently under failure.</p>","tags":["Architecture","Scalability","Reliability"]},{"location":"version-control-git-github/","title":"The Definitive Guide to Version Control with Git and GitHub","text":"<p>Version control is the foundation of reliable software delivery. This guide teaches Git from first principles, then layers in practical GitHub workflows used by high-performing teams. You\u2019ll learn the mental models, the everyday commands, and the advanced tools to collaborate confidently without fear of breaking anything.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#what-is-version-control-and-why-it-matters","title":"What Is Version Control (and Why It Matters)","text":"<p>Version control systems track changes to files over time so you can collaborate, audit history, and restore previous states. Git is a distributed VCS: every clone contains the entire history, enabling fast local operations and offline work. GitHub is a hosting and collaboration platform built on top of Git.</p> Git vs GitHubCentralized vs Distributed <ul> <li>Git: command-line tool and file format for versioning</li> <li>GitHub: remote hosting, Pull Requests, Issues, Actions, Discussions, Packages</li> </ul> <ul> <li>Centralized (e.g., SVN): single server of truth</li> <li>Distributed (Git): many full copies; collaboration via push/pull/fetch</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#the-git-mental-model","title":"The Git Mental Model","text":"<p>Git tracks content snapshots and references. The three most important zones are the working directory, the staging area (index), and the local repository.</p> <pre><code>graph LR\n    A[Working Directory] -- git add --&gt; B[Staging Area]\n    B -- git commit --&gt; C[Local Repository]\n    C -- git push --&gt; D[Remote Repository]\n    D -- git fetch/pull --&gt; C\n    C -- git checkout/switch --&gt; A</code></pre> <p>Think in small, logical commits that tell a story. Branch to isolate work. Merge or rebase to integrate.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#install-and-configure-git","title":"Install and Configure Git","text":"macOSWindows (PowerShell)Linux <pre><code>brew install git\ngit --version\n</code></pre> <pre><code>winget install --id Git.Git -e\ngit --version\n</code></pre> <pre><code>sudo apt update &amp;&amp; sudo apt install -y git       # Debian/Ubuntu\nsudo dnf install -y git                           # Fedora\ngit --version\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#first-time-setup","title":"First-Time Setup","text":"<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\ngit config --global init.defaultBranch main\ngit config --global core.editor \"code --wait\"       # VS Code as editor\ngit config --global pull.rebase false                # start with merges\n</code></pre> <p>Optional but recommended:</p> <pre><code># Better diffs and helpful aliases\ngit config --global color.ui auto\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.last 'log -1 --stat'\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#create-or-clone-a-repository","title":"Create or Clone a Repository","text":"Start a new repoClone existing <pre><code>mkdir hello-git &amp;&amp; cd hello-git\ngit init\necho \"# Hello Git\" &gt; README.md\ngit add README.md\ngit commit -m \"chore: initial commit\"\n</code></pre> <pre><code>git clone https://github.com/owner/repo.git\ncd repo\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#everyday-workflow","title":"Everyday Workflow","text":"<pre><code># 1) See what changed\ngit status\ngit diff                     # unstaged changes\ngit diff --staged            # staged vs last commit\n\n# 2) Stage what you want to commit\ngit add path/to/file\ngit add -p                   # interactively stage hunks\n\n# 3) Commit with a meaningful message\ngit commit -m \"feat: add user search by email\"\n\n# 4) Update your branch from remote\ngit pull                     # merge-based (default here)\n# or: git pull --rebase      # rebase-based\n\n# 5) Push your work\ngit push -u origin my-feature\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#commit-message-best-practices","title":"Commit Message Best Practices","text":"<ul> <li>Use imperative mood: \"fix bug\", \"add feature\"</li> <li>Keep subject \u2264 72 chars; add details in body if needed</li> <li>Consider Conventional Commits for automation:</li> </ul> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\nfeat(search): add email filter to users list\n\nBody explaining why, not what. Reference issues if useful.\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#branching-strategies","title":"Branching Strategies","text":"<p>Common strategies include Trunk-Based Development and Git Flow. Most teams today prefer Trunk-Based with short-lived feature branches and frequent merges.</p> <pre><code>flowchart LR\n    main((main)) --&gt; F1[feature/login]\n    main --&gt; F2[feature/search]\n    F1 --&gt; main\n    F2 --&gt; main</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#create-switch-and-delete-branches","title":"Create, Switch, and Delete Branches","text":"<pre><code>git switch -c feature/search-ui   # create and switch\ngit switch main                   # go back\ngit branch -d feature/search-ui   # delete merged branch\ngit branch -D old-experiment      # force delete\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#merge-vs-rebase","title":"Merge vs Rebase","text":"<p>Both integrate changes. Merge preserves history; rebase rewrites your branch to apply on top of a base branch.</p> Merge (safe, non-destructive)Rebase (linear history) <pre><code>git switch feature/login\ngit merge main\n# resolves conflicts, creates a merge commit\n</code></pre> <pre><code>git switch feature/login\ngit rebase main\n# replay commits atop main; fix conflicts along the way\n# if stuck: git rebase --abort   or   git rebase --continue\n</code></pre> <pre><code>sequenceDiagram\n    participant M as main\n    participant F as feature\n    Note over F: Before rebase\n    F-&gt;&gt;F: commits A, B\n    M-&gt;&gt;M: commits X, Y\n    Note over F: Rebase F onto M\n    F-&gt;&gt;M: pick A'\n    F-&gt;&gt;M: pick B'</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#handling-conflicts","title":"Handling Conflicts","text":"<p>Conflicts occur when the same lines changed in both branches.</p> <pre><code># After pull/merge/rebase reports conflicts:\ngit status                         # see conflicted files\n\n# Edit files, resolve conflict markers &lt;&lt;&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\ngit add path/to/conflicted-file\ngit commit                         # for merge\ngit rebase --continue              # for rebase\n</code></pre> <p>Tips: - Resolve small, logical conflicts first - Prefer consistent formatting to reduce diff noise - Run tests before pushing</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#undo-and-recover-safely","title":"Undo and Recover Safely","text":"Unstage changesDiscard local editsAmend last commitRevert a bad commit (public history safe)Time travel with reflog <pre><code>git restore --staged path/to/file\n</code></pre> <pre><code>git restore path/to/file         # careful: this loses changes\n</code></pre> <pre><code>git commit --amend -m \"fix: correct typo in docs\"\n</code></pre> <pre><code>git revert &lt;commit_sha&gt;\n</code></pre> <pre><code>git reflog                       # shows where HEAD moved\ngit checkout &lt;sha&gt;\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#stashing-work-in-progress","title":"Stashing Work-in-Progress","text":"<pre><code>git stash push -m \"wip: partial search filters\"\ngit stash list\ngit stash show -p stash@{0}\ngit stash pop     # apply + drop\ngit stash apply   # apply only\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#tags-and-releases","title":"Tags and Releases","text":"<pre><code>git tag -a v1.0.0 -m \"First stable release\"\ngit push --tags\n</code></pre> <p>Use annotated tags for semantic versioning; create GitHub Releases from tags for changelogs and assets.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#github-fundamentals","title":"GitHub Fundamentals","text":"<ul> <li>Repositories: public or private</li> <li>Issues: track tasks/bugs with labels, assignees, and milestones</li> <li>Pull Requests (PRs): propose changes; enable reviews and checks</li> <li>Discussions: community Q&amp;A and proposals</li> <li>Projects: kanban planning</li> <li>Wikis: long-form documentation</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#https-vs-ssh-and-tokens","title":"HTTPS vs SSH (and Tokens)","text":"<pre><code># HTTPS clone (uses PAT on push)\ngit clone https://github.com/owner/repo.git\n\n# SSH clone (key-based)\nssh-keygen -t ed25519 -C \"you@example.com\"\nssh-add ~/.ssh/id_ed25519\ngit clone git@github.com:owner/repo.git\n</code></pre> <p>For HTTPS pushes, create a Personal Access Token (fine-grained) and use it as the password. For SSH, upload your public key to GitHub.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#fork-and-pr-vs-shared-repo","title":"Fork-and-PR vs Shared-Repo","text":"<pre><code>sequenceDiagram\n    participant U as You (fork)\n    participant O as Origin Repo\n    U-&gt;&gt;O: fork\n    U-&gt;&gt;U: clone fork\n    U-&gt;&gt;U: create branch, commit, push\n    U-&gt;&gt;O: open Pull Request\n    O-&gt;&gt;U: review, request changes\n    U-&gt;&gt;O: update branch, CI passes\n    O-&gt;&gt;O: merge PR</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#opening-an-effective-pr","title":"Opening an Effective PR","text":"<ul> <li>Keep PRs small and focused</li> <li>Write a clear title and description (why, tradeoffs, screenshots)</li> <li>Link Issues and Discussions</li> <li>Ensure CI passes and tests are updated</li> <li>Request specific reviewers and use code owners when applicable</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#protecting-main-and-enforcing-quality","title":"Protecting Main and Enforcing Quality","text":"<ul> <li>Protected branches: require PR, reviews, status checks, linear history</li> <li>Required checks: unit tests, lint, type-check, build</li> <li>Code owners: automatic review assignment</li> <li>Bypass rules for admins sparingly</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#automate-with-github-actions-cicd","title":"Automate with GitHub Actions (CI/CD)","text":"<pre><code>name: ci\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 20\n      - run: npm ci\n      - run: npm test -- --ci\n</code></pre> <p>Add environment protections for deploy jobs; use environments, required reviewers, and secrets.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#keep-repos-healthy","title":"Keep Repos Healthy","text":"<ul> <li>.gitignore: avoid committing build artifacts, secrets, large files</li> <li>LICENSE: make intent explicit</li> <li>README: quickstart, architecture, contribution guide</li> <li>CONTRIBUTING.md, CODE_OF_CONDUCT.md, SECURITY.md</li> <li>Small, coherent commits; squash or rebase before merge if noisy</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#large-files-and-monorepos","title":"Large Files and Monorepos","text":"Git LFSSparse Checkout (partial clones) <pre><code>git lfs install\ngit lfs track \"*.bin\"\ngit add .gitattributes\n</code></pre> <pre><code>git clone --filter=blob:none --no-checkout git@github.com:owner/huge-repo.git\ncd huge-repo\ngit sparse-checkout init --cone\ngit sparse-checkout set apps/web apps/api\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#security-and-trust","title":"Security and Trust","text":"<ul> <li>Sign commits and tags (GPG or SSH signatures)</li> <li>Use branch protections and required reviews</li> <li>Avoid pushing secrets; scan with GitHub Advanced Security or pre-commit hooks</li> <li>Rotate tokens; limit PAT scopes</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#sign-your-commits-gpg","title":"Sign Your Commits (GPG)","text":"<pre><code>gpg --full-generate-key\ngpg --list-secret-keys --keyid-format=long\ngit config --global user.signingkey &lt;KEY_ID&gt;\ngit config --global commit.gpgsign true\n</code></pre>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#troubleshooting-faq","title":"Troubleshooting FAQ","text":"fatal: not a git repositoryPermission denied (publickey)Updates were rejected because the remote contains work that you do not haveHow do I undo the last commit but keep my changes?How do I remove a file from history (secret accidentally committed)? <p>Run inside a repo or initialize one: <code>git init</code>.</p> <p>Add your SSH key to the agent and GitHub; or use HTTPS + PAT.</p> <p>Pull first, resolve, then push: <code>git pull --rebase</code> or <code>git pull</code> then fix conflicts.</p> <p><code>git reset --soft HEAD~1</code></p> <p>Use <code>git filter-repo</code> or <code>git filter-branch</code>, then force-push and rotate secrets.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#glossary-quick-reference","title":"Glossary (Quick Reference)","text":"<ul> <li>Commit: snapshot with metadata</li> <li>Branch: movable pointer to a commit</li> <li>HEAD: your current checked-out commit/branch</li> <li>Remote: named reference to another repository (e.g., origin)</li> <li>Merge: combine histories with a merge commit</li> <li>Rebase: replay commits onto another base</li> <li>Tag: named pointer for releases</li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#further-reading","title":"Further Reading","text":"<ul> <li>Git Book: <code>https://git-scm.com/book/en/v2</code></li> <li>GitHub Docs: <code>https://docs.github.com</code></li> <li>Conventional Commits: <code>https://www.conventionalcommits.org</code></li> </ul>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"version-control-git-github/#conclusion","title":"Conclusion","text":"<p>You now have a practical toolbox and the mental models to use Git effectively and collaborate on GitHub with confidence. Start with small, clear commits; branch freely; integrate often; protect main; and automate quality with CI. As your team matures, refine policies and workflows\u2014Git and GitHub will scale with you.</p>","tags":["Git","GitHub","Version Control","DevOps"]},{"location":"archive/2025/","title":"2025","text":""},{"location":"category/tech/","title":"Tech","text":""},{"location":"category/python/","title":"Python","text":""},{"location":"category/system-design/","title":"System Design","text":""},{"location":"category/test/","title":"Test","text":""}]}